# Use the official Node.js image as the base image
FROM node:latest

# Set the working directory in the container
WORKDIR /app

# Copy the rest of the application code to the working directory
COPY . .

# Install pnpm globally and install project dependencies
RUN npm install -g pnpm pm2

# Set pnpm registry to a faster mirror
RUN pnpm config set registry https://registry.npmmirror.com/

# Fix changesets version if it's set to "catalog:"
RUN if grep -q '"@changesets/cli": "catalog:"' package.json; then \
    sed -i 's/"@changesets\/cli": "catalog:"/"@changesets\/cli": "^2.29.6"/' package.json; \
    fi

# Install dependencies using pnpm
RUN pnpm install --no-frozen-lockfile

# Replace apt sources with a faster mirror (USTC)
RUN rm -f /etc/apt/sources.list.d/* && \
    echo "deb https://mirrors.ustc.edu.cn/debian/ bookworm main contrib non-free" > /etc/apt/sources.list && \
    echo "deb https://mirrors.ustc.edu.cn/debian/ bookworm-updates main contrib non-free" >> /etc/apt/sources.list && \
    echo "deb https://mirrors.ustc.edu.cn/debian/ bookworm-backports main contrib non-free" >> /etc/apt/sources.list && \
    echo "deb https://mirrors.ustc.edu.cn/debian-security bookworm-security main contrib non-free" >> /etc/apt/sources.list

# Install system dependencies
RUN apt-get update && \
    apt-get install -y nginx curl && \
    rm -rf /var/lib/apt/lists/*

# Build the base packages
RUN pnpm build:pkgs

# Copy example environment files to the appropriate locations
RUN cp ./example/env-frontend.example ./packages/react-app/.env && \
    cp ./example/env-backend.example ./packages/platform/.env

# Build the React app
RUN cd packages/react-app && \
    pnpm build && \
    cd ../..

# Generate Prisma client, push database schema, and build the backend
RUN cd packages/platform && \
    pnpm prisma generate && pnpm prisma db push && \
    pnpm build && \
    cd ../..

# Copy the built React app to the Nginx html directory
RUN mkdir -p /app/html/dify-chat && \
    cp -r ./packages/react-app/dist/* /app/html/dify-chat/ && \
    rm -rf /etc/nginx/nginx.conf && \
    cp -r ./example/nginx.conf.example /etc/nginx/nginx.conf

# create PM2 settings file if not exists
RUN mkdir -p logs && \
    if [ ! -f ecosystem.config.js ]; then \
        echo 'export default {' > ecosystem.config.js && \
        echo '  apps: [{' >> ecosystem.config.js && \
        echo '    name: "dify-chat-platform",' >> ecosystem.config.js && \
        echo '    cwd: "./packages/platform",' >> ecosystem.config.js && \
        echo '    script: "pnpm",' >> ecosystem.config.js && \
        echo '    args: "start",' >> ecosystem.config.js && \
        echo '    env: {' >> ecosystem.config.js && \
        echo '      NODE_ENV: "production",' >> ecosystem.config.js && \
        echo '      PORT: 5300' >> ecosystem.config.js && \
        echo '    },' >> ecosystem.config.js && \
        echo '    instances: 1,' >> ecosystem.config.js && \
        echo '    exec_mode: "fork",' >> ecosystem.config.js && \
        echo '    watch: false,' >> ecosystem.config.js && \
        echo '    max_memory_restart: "1G",' >> ecosystem.config.js && \
        echo '    error_file: "./logs/platform-error.log",' >> ecosystem.config.js && \
        echo '    out_file: "./logs/platform-out.log",' >> ecosystem.config.js && \
        echo '    log_file: "./logs/platform-combined.log",' >> ecosystem.config.js && \
        echo '    time: true,' >> ecosystem.config.js && \
        echo '    autorestart: true,' >> ecosystem.config.js && \
        echo '    max_restarts: 10,' >> ecosystem.config.js && \
        echo '    min_uptime: "10s"' >> ecosystem.config.js && \
        echo '  }]' >> ecosystem.config.js && \
        echo '};' >> ecosystem.config.js; \
    fi

# Expose the application port
EXPOSE 5300 80

# Create startup script
RUN echo '#!/bin/bash\n\
# 启动 Nginx\n\
nginx -g "daemon off;" &\n\
# 启动 Node.js 后端（PM2）\n\
pm2-runtime ecosystem.config.js' > /app/start.sh

# Make the startup script executable
RUN chmod +x /app/start.sh

# Define health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:5300/ || curl -f http://localhost/dify-chat/index.html || exit 1

# Start the application
CMD ["/app/start.sh"]